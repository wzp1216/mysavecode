###################################################################
打开文件、保存、关闭文件(vi命令模式下使用)
vi filename       //打开filename文件
:w       //保存文件
:w vpser.net //保存至vpser.net文件
:q          //退出编辑器，如果文件已修改请使用下面的命令
:q!        //退出编辑器，且不保存
:wq         //退出编辑器，且保存文件

###################################################################
二、插入文本或行(vi命令模式下使用，执行下面命令后将进入插入模式，按ESC键可退出插入模式)
a      //在当前光标位置的右边添加文本
i       //在当前光标位置的左边添加文本
A     //在当前行的末尾位置添加文本
I      //在当前行的开始处添加文本(非空字符的行首)
O     //在当前行的上面新建一行
o     //在当前行的下面新建一行
R    //替换(覆盖)当前光标位置及后面的若干文本
J    //合并光标所在行及下一行为一行(依然在命令模式)
.    //重复上一次操作

<<<<<<< HEAD
=======
crtl+o  i  到上一次位置  到下一次位置；
可以返回刚才的位置
>>>>>>> b24a16190fc6175294f270c1f425eeddb4b7f453
###################################################################
三、移动光标(vi命令模式下使用)
1、使用上下左右方向键

2、命令模式下：h   向左、j   向下 、k   向上、l  向右。
空格键 向右、Backspace  向左、Enter  移动到下一行首、-  移动到上一行首。

###################################################################
四、删除、恢复字符或行(vi命令模式下使用)
x         //删除当前字符
nx         //删除从光标开始的n个字符
dd      //删除当前行
ndd   //向下删除当前行在内的n行
u       //撤销上一步操作
U      //撤销对当前行的所有操作

###################################################################
五、搜索(vi命令模式下使用)
/vpser     //向光标下搜索vpser字符串
?vpser     //向光标上搜索vpser字符串
n           //向下搜索前一个搜素动作
N         //向上搜索前一个搜索动作

###################################################################
六、跳至指定行(vi命令模式下使用)
n+        //向下跳n行
n-         //向上跳n行
nG        //跳到行号为n的行
G           //跳至文件的底部

###################################################################
七、设置行号(vi命令模式下使用)
:set  nu     //显示行号
:set nonu    //取消显示行号

###################################################################
八、复制、粘贴(vi命令模式下使用)
yy    //将当前行复制到缓存区，也可以用 "ayy 复制，"a 为缓冲区，a也可以替换为a到z的任意字母，可以完成多个复制任务。
nyy   //将当前行向下n行复制到缓冲区，也可以用 "anyy 复制，"a 为缓冲区，a也可以替换为a到z的任意字母，可以完成多个复制任务。
yw    //复制从光标开始到词尾的字符。
nyw   //复制从光标开始的n个单词。
y^      //复制从光标到行首的内容。  VPS侦探
y$      //复制从光标到行尾的内容。
p        //粘贴剪切板里的内容在光标后，如果使用了前面的自定义缓冲区，建议使用"ap 进行粘贴。
P        //粘贴剪切板里的内容在光标前，如果使用了前面的自定义缓冲区，建议使用"aP 进行粘贴。

###################################################################
九、替换(vi命令模式下使用)
:s/old/new      //用new替换行中首次出现的old
:s/old/new/g         //用new替换行中所有的old
:n,m s/old/new/g     //用new替换从n到m行里所有的old
:%s/old/new/g      //用new替换当前文件里所有的old

###################################################################
十、编辑其他文件
<<<<<<< HEAD
:e otherfilename    //编辑文件名为otherfilename的文件。
修改文件格式
:set fileformat=unix  

=======
:hide edit  otherfilename    //编辑文件名为otherfilename的文件。

当打开多个文件时
:ls 可以显示打开的文件 ＝buffers
:bn bp 可以转到上一个或下一个缓存区

修改文件格式
:set fileformat=unix  

多窗口：
:split :new 可以开窗口  vs可以左右开窗口
ctrl+w+w 可以在窗口间切换

>>>>>>> b24a16190fc6175294f270c1f425eeddb4b7f453

###################################################################
跳转到指定字符
Vim有一招特别酷，不管你在哪儿，都能查找特定字符并直接跳转过去
向前查找并直接跳转到<字符
f<
向前查找并跳转到<的前一个字符
t<
你可以这么理解，第一种找出目标（f），直接定位到查找对象；第二种到达目标（t），向着目标对象前进，定位到目标的前面。
修改到下一个”<”之间的内容
ct<


###################################################################
搜索总结
/{string}： 搜索字符串
t ： 跳转到某一字符前
F ： 跳转到某一字符处
*：搜索当前光标位置单词的其他实例
n ： 搜索完成后，跳转到下一个匹配实例
N ：搜索完成后，跳转到上一条匹配实例
; : 跳转到指定字符时，使用分号跳转到下一实例
, ：跳转到指定字符时，使用逗号跳转到上一实例

###################################################################

在屏幕间移动
H：向上移动一屏
M：移动到屏幕中间
L：移动到屏幕底端
gg: 移动到文件顶端
G：移动到文件结尾
^U： 向上移动半屏
^D： 向下移动半屏
^F： 下一页
^B： 上一页
###################################################################
替换
Vim的另一个强大的功能是替换。命令分为三部分，首先指定将要被替换的字符串，之后是替换的新字符串，最后指定替换范围。
基本设置为:%s
将每行的foo替换为bar
:%s /foo/bar/g
将当前行中的foo替换为bar
:s /foo/bar/g
【注意： 两个命令的不同之处在于，单行替换s前少了%】

###################################################################
进入可视化模式
Vim的有许多迷人之处吸引着我们，不过它们相比较可视化模式的技能来说，还是太弱了。
也许可视化模式的最强大之处在于：我们前面学到的所有的一切命令，通过结合可视化模式使用，能力都会大有提升。这是由于在可视化模式下选中的高亮文本，可以全部作为命令的操作对象。
首先，学会进入可视化模式并选择文本。通过“v”进入可视化模式，有三种选择。

基于字符选中： v
基于行选中： V
段落选中： Ctrl-v


###################################################################
Vim即语言

动词
所谓动词指的是我们执行的动作，这些动作可以施加在名词之上。可以看看下面几个常见的动作：
d: 删除
c: 修改
y: 拖拉（拷贝）
v: 可视化选择 (V for line vs. character)
修饰语
定语用在名词之前，表明以哪种方式来执行动作。几个例子：
i: 内部
a: 周围
NUM: 数字 (e.g.: 1, 2, 10)
t: 查找到指定字符，并跳转到这个字符的前面
f: 查找到指定字符，并跳转到字符所处的位置
/: 查找字符串 (literal or regex)
名词
在英语中，名词用来表示你所操作的对象。它们都是客体。在vim中也是这样。下面列出vim中的名词：
w: 单词
s: 句子
): 句子 (另一种操作方式)
p: 段落
}: 段落 (另一种操作方式)
t: 标签 ( HTML/XML)
b: 块 (编程语言)



###################################################################
set foldmethod=indent
zo  open
zc  close
zR  open all
zM  close all
 
<<<<<<< HEAD

=======
set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936
set termencoding=utf-8
set encoding=utf-8	设置编码格式，encoding 选项用于缓存的文本、寄存器、Vim 脚本文件等；fileencoding 选项是 Vim 写入文件时采用的编码类型；termencoding 选项表示输出到终端时采用的编码类型。
set nu
set number	nu 是 number 的缩写，所以上面两个配置命令是完全等效的，二选一即可。取消行号可使用 set nonu。
set cursorline	突出显示当前行。
set mouse=a
set selection=exclusive
set selectmode=mouse,key	Vim 编辑器里默认是不启用鼠标的，通过此设置即可启动鼠标。
set autoindent	设置自动缩进，即每行的缩进同上一节相同。
set tabstop=4	设置 Tab 键宽度为 4 个空格。

###################################################################
1：进入列模式下： 移动光标到要注释区块的第一行，Unix下按Ctrl+v，Windows版本的VIM则按Ctrl+Q
2：选择所需要的列：光标移动到要注释区块的最后一行（若干个j，或者直接输入行号再按G，或者按G到最后一行）
3：针对列的操作： 例如
      删除 输入d ；
      替换 输入c ；
      需要输入则 按Shift+i，然后输入内容
4：然后退出保存：按两次ESC

使用列块模式在每行后面加一个“：
<Ctrl + v>（如果macvim或者gvim则是<Ctrl + q>）进入列块可视模式，jj$先下移动两行然后跳到行尾；
A;进入插入模式输入分号；
<Esc>回到普通模式完成插入。

###################################################################
录制宏：
	qa			Start recording a macro in register a.
	^			Move to the beginning of the line.
	i#include "<Esc>	Insert the string #include " at the beginning
				of the line.
	$			Move to the end of the line.
	a"<Esc>			Append the character double quotation mark (")
				to the end of the line.
	j			Go to the next line.
	q			Stop recording the macro.
Now that you have done the work once, you can repeat the change by typing the
command "@a" three times.
可以重复在四个文件前加上 ＃include " "
	#include "stdio.h "
	#include "fcntl.h "
	#include "unistd.h "
	#include "stdlib.h "

#############################################################
g/^s*$/d
g:面向全文件
/分隔
^s*$  ^表示行首       $表示行尾  d 删除
s表示空字符，包括TAB SPACE  * 表示多个，不限个数；
整个命令表示删除空行；







