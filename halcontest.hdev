<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="20.11.2.0">
<procedure name="main">
<interface/>
<body>
<c>*READ</c>
<l>dev_close_window ()</l>
<l>dev_update_off ()</l>
<l>dev_open_window (0, 0, 512, 512, 'black', WindowHandle)</l>
<l>set_display_font (WindowHandle, 14, 'mono', 'true', 'false')</l>
<l>Message := 'open a file'</l>
<l>disp_message (WindowHandle, Message, 'window', 12, 12, 'black', 'true')</l>
<l>disp_continue_message (WindowHandle, 'black', 'true')</l>
<c></c>
<c>* Show input images with different illumination</c>
<l>read_image (Images, '/home/wzp/git/mysavecode/opencv/test_img/side/Image_3'+[0:7]+'.jpg')</l>
<l>for   I := 1 to 8  by 1</l>
<l>    Message := 'Acquire image ' + I+ ' of 8'</l>
<l>    select_obj (Images, Image, I)</l>
<l>    dev_clear_window()</l>
<l>    dev_display (Image)</l>
<l>    disp_message (WindowHandle, Message, 'window', 12, 12, 'black', 'true')</l>
<l>    *stop()</l>
<c></c>
<c>*mean image;  cut bottle;</c>
<l>    gen_rectangle1 (ROI, 580, 680, 1500, 1620)</l>
<l>    reduce_domain(Image,ROI,OKimage)</l>
<l>    dev_clear_window()</l>
<l>    dev_display (OKimage)</l>
<l>    *stop ()</l>
<c></c>
<c>*find scratch</c>
<l>    mean_image (OKimage, ImageMean, 5, 5)</l>
<l>    dyn_threshold (OKimage, ImageMean, DarkPixels, 3, 'not_equal')</l>
<l>    connection (DarkPixels, ConnectedRegions)</l>
<l>    select_shape (ConnectedRegions, SelectedRegions, 'area', 'and', 10, 3000)</l>
<l>    dev_clear_window()</l>
<l>    dev_display(OKimage)</l>
<l>    dev_display (SelectedRegions)</l>
<l>    stop()</l>
<c>    </c>
<c>*rft   find scratch</c>
<l>    get_image_size(OKimage,Width,Height)</l>
<l>    invert_image (OKimage, ImageInverted)</l>
<l>    gen_sin_bandpass (ImageBandpass, 0.4, 'none', 'rft', Width, Height)</l>
<l>    rft_generic (ImageInverted, ImageFFT, 'to_freq', 'none', 'complex', Width)</l>
<l>    convol_fft (ImageFFT, ImageBandpass, ImageConvol)</l>
<l>    rft_generic (ImageConvol, Lines, 'from_freq', 'n', 'byte', Width)</l>
<c>    * </c>
<c>    * Segment the scratches by using morphology</c>
<l>    threshold (Lines, Region, 5, 255)</l>
<l>    connection (Region, ConnectedRegions)</l>
<l>    select_shape (ConnectedRegions, SelectedRegions, 'area', 'and', 5, 5000)</l>
<l>    dilation_circle (SelectedRegions, RegionDilation, 5.5)</l>
<l>    union1 (RegionDilation, RegionUnion)</l>
<l>    reduce_domain (Image, RegionUnion, ImageReduced)</l>
<l>    lines_gauss (ImageReduced, LinesXLD, 0.8, 3, 5, 'dark', 'false', 'bar-shaped', 'false')</l>
<l>    union_collinear_contours_xld (LinesXLD, UnionContours, 60, 3, 3, 0.2, 'attr_keep')</l>
<l>    select_shape_xld (UnionContours, SelectedXLD, 'contlength', 'and', 10, 2000)</l>
<l>    gen_region_contour_xld (SelectedXLD, RegionXLD, 'filled')</l>
<l>    union1 (RegionXLD, RegionUnion)</l>
<l>    dilation_circle (RegionUnion, RegionScratches, 10.5)</l>
<l>    dev_clear_window()</l>
<l>    dev_display (OKimage)</l>
<l>    dev_display (RegionScratches)</l>
<l>    stop()</l>
<c></c>
<c>*sub-gauss</c>
<l>    Sigma1 := 10.0</l>
<l>    Sigma2 := 3.0</l>
<l>    gen_gauss_filter (GaussFilter1, Sigma1, Sigma1, 0.0, 'none', 'rft', Width, Height)</l>
<l>    gen_gauss_filter (GaussFilter2, Sigma2, Sigma2, 0.0, 'none', 'rft', Width, Height)</l>
<l>    sub_image (GaussFilter1, GaussFilter2, Filter, 1, 0)</l>
<l>    rft_generic (OKimage, ImageFFT, 'to_freq', 'none', 'complex', Width)</l>
<l>    convol_fft (ImageFFT, Filter, ImageConvol)</l>
<l>    rft_generic (ImageConvol, ImageFiltered, 'from_freq', 'n', 'real', Width)</l>
<c>    * </c>
<c>    * Process the filtered image</c>
<l>    gray_range_rect (ImageFiltered, ImageResult, 10, 10)</l>
<l>    min_max_gray (ImageResult, ImageResult, 0, Min, Max, Range)</l>
<l>    threshold (ImageResult, RegionDynThresh, max([5.55,Max * 0.8]), 255)</l>
<l>    connection (RegionDynThresh, ConnectedRegions)</l>
<l>    select_shape (ConnectedRegions, SelectedRegions, 'area', 'and', 4, 99999)</l>
<l>    union1 (SelectedRegions, RegionUnion)</l>
<l>    closing_circle (RegionUnion, RegionClosing, 10)</l>
<l>    connection (RegionClosing, ConnectedRegions1)</l>
<l>    select_shape (ConnectedRegions1, SelectedRegions1, 'area', 'and', 10, 99999)</l>
<l>    area_center (SelectedRegions1, Area, Row, Column)</l>
<l>    dev_display (OKimage)</l>
<l>    Number := |Area|</l>
<l>    if (Number)</l>
<l>        gen_circle_contour_xld (ContCircle, Row, Column, gen_tuple_const(Number,30), gen_tuple_const(Number,0), gen_tuple_const(Number,rad(360)), 'positive', 1)</l>
<l>        ResultMessage := ['Not OK',Number + ' defect(s) found']</l>
<l>        Color := ['red','black']</l>
<l>        dev_display (ContCircle)</l>
<l>    else</l>
<l>        ResultMessage := 'OK'</l>
<l>        Color := 'forest green'</l>
<l>    endif</l>
<l>    stop()</l>
<c></c>
<c>    </c>
<c>    </c>
<l>endfor</l>
<c></c>
<l>* closing_rectangle1 (RegionDynThresh, RegionClosing, 8.5, 10)</l>
<l>* opening_rectangle1 (RegionClosing, RegionOpening, 6.5, 10)</l>
<l>* connection (RegionOpening, ConnectedRegions)</l>
<l>* smallest_circle (ConnectedRegions, Row, Column, Radius)</l>
<l>* gen_circle_contour_xld (ContCircle, Row, Column, Radius, 0, 6.28318, 'positive', 1)</l>
<c>* </c>
<c>* Show the results</c>
<l>* dev_display (Image)</l>
<l>* dev_set_color ('green')</l>
<l>* dev_display (ContCircle)</l>
<l>* Message := 'Results of braille segmentation after morphology'</l>
<l>* disp_message (WindowHandle, Message, 'window', 12, 12, 'black', 'true')</l>
<l>* dev_update_on ()</l>
<c></c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
