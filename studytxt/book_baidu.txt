目录
任务四 标题一   2
学习目标    2
知识目标    2
能力目标    2
工作任务    2
相关知识    2
一、    Docker基础知识  2
1、虚拟机、容器与Docker 2
2、Docker常用命令   5
二、    Apollo系统框架  17
三、    CyberRT功能及指令   18
任务实施    18
任务测评    18
巩固与提高  18


 
任务四 标题一
学习目标
知识目标
1、 了解容器技术，掌握Docker常用命令。
2、 了解百度Apollo软件系统架构。
3、 了解CyberRT功能及作用。
4、 掌握CyberRT常用命令及使用方法。
能力目标
1、 能够运用Docker搭建Apollo系统开发运行环境。
2、 能够启动Apollo并查看系统运行状态。
3、 能够利用CyberRT命令查看自动驾驶系统数据与信息。
工作任务
通过安装Apollo系统，对软件系统有了一定的认识，但对其系统的组成，系统的运行原理等还需进一步加强认识与理解。Apollo系统是基于Docker构建其开发环境的，为此需了解与学习Docker容器技术相关基础知识，并能够掌握Docker基本命令及其应用。
Apollo是一个庞大的自动驾驶软件系统，首先要了解其模块与组成，通过查看各模块相关文件，了解模块主要作用与功能。
Apollo利用CyberRT实现任务管理、信息通信，它是Apollo与底层操作系统的接口。
本次任务是通过学习相关Docker、Apollo、CyberRt等相关基础知识，进一步熟悉Apollo软件系统，利用Apollo提供示例数据，对Apollo系统进行基本测试。
能够使用相关命令进行系统状态与信息查询，了解Apollo系统基本信息与数据的观测方法。
相关知识
一、    Docker基础知识
1、虚拟机、容器与Docker
（1）虚拟机
虚拟机（Virtual Machine）指通过软件模拟的具有完整硬件系统功能的、运行在一个完全隔离环境中的完整计算机系统。流行的虚拟机软件有VMware、Virtual Box和Virtual PC，它们都能在Windows或Linux系统上虚拟出多个计算机。通过生成全新虚拟镜像，虚拟机具有与真实操作系统完全一样的功能，进入虚拟机后，所有操作都是在这个全新的独立的虚拟系统里面进行，可以独立安装运行软件，保存数据，拥有用户独立系统，不会对真正的操作系统产生影响，用户能够在现有操作系统与虚拟机系统之间进行灵活切换。
 
在宿主机操作系统上，可以安装了多个虚拟机，而在每个虚拟机中，通过虚拟化技术，实现了一个虚拟操作系统，随后，就可以在该虚拟操作系统上，安装自己所需的应用程序了。虚拟机的优点在于具有良好的封装，每个虚拟机独立运行，互不干涉，可以无缝迁移，因此维护和升级简单。虚拟机缺点在于：启动虚拟机就像启动一台计算机，初始化过程耗时较长，每个虚拟机都需占用主机的硬件与网络资源，资源消耗较大。
需要先在Linux系统中安装VMWare、VirtualBox之类的虚拟化软件，通过虚拟化软件才能安装虚拟机系统，Linux内核不对虚拟机进行直接管理。容器不包含自己的操作系统，也没有hypervisor层，同一台宿主机上的容器共享内核，如图，所以比起传统的虚拟机，容器更加轻量化、启动的速度更快。在同样数量的硬件设备中，可以部署更多的容器实例，因此容器技术也被广大云提供商热衷。
（2）容器技术
容器（Container）技术能有效地将单个操作系统的资源划分到孤立的组中，以便更好地在孤立的组之间平衡有冲突的资源使用需求。
虚拟化技术已经成为一种被广泛认可的服务器资源共享方式，它可以在按用户需求构建虚拟机，为系统管理提供极大的灵活性，但虚拟化技术仍然存在一些性能和资源使用效率方面的问题，因此出现了一种称为容器的新型虚拟化技术。
容器和虚拟机一样可以实现应用程序之间的隔离，但是系统资源利用率低。容器技术的思想起源于Unix的chroot机制，该机制通过改变进程运行时的根目录来分离各进程的文件访问权限、达到资源隔离的目的。经过数十年对资源隔离技术的探索，LXC（Linux Containers）出现并成为首个完整实现的Linux容器管理方案，为之后的容器技术发展奠定了重要基础。LXC基于Linux内核提供的控制组和命名空间机制来实现轻量级的虚拟化，通过控制组对共享资源进行监控、限制和管理，为容器动态分配CPU时间、可用内存空间、I/O操作时间等，通过命名空间完成容器与宿主机之间、不同容器之间的隔离以及对设备的访问控制。
Linux内核已经支持容器技术十几年，而近年来一些容器管理框架的出现大大简化了容器的构建、运行和共享，比如Docker、CoreOS等，使得容器技术获得了前所未有的高度关注。传统的容器技术虽然体现了良好的隔离性和轻量性，但是为保证容器上线生产后能正常运行，需要在生产机器上部署和开发机器中相同的环境，这一过程不仅会耗费大量的时间和人力，还可能影响生产机器上运行的其他应用程序。针对容器移植时的环境适配问题，Docker提供了一种新方案，通过将应用程序和全部依赖（包括操作系统的一部分）打包成镜像，镜像相当于静态的、可共享的模板，用户可在支持Docker的主机上根据镜像直接构建、运行容器实例，不用针对运行环境做任何适配，真正做到“一次开发，随处运行”。 
 
（3）Docker概述
Docker Engine（Docker引擎）是用来运行和管理Docker容器的核心软件，通常人们会简称为Docker。Docker 是一个开源项目，诞生于2013年，最初公司内部项目，它基于Google公司推出的Go语言实现。项目后来加入了Linux基金会，遵从Apache 2.0协议，项目代码在GitHub上进行维护。Docker项目的目标是实现轻量级的操作系统虚拟化解决方案。
Docker由如下主要的组件构成：Docker 客户端（Docker Client）、Docker 守护进程（Docker daemon）、containerd（容器管理）以及runc（运行环境）。它们共同负责容器的创建和运行。总体逻辑如下图所示。
 

Docker是一款针对程序开发人员和系统管理员来开发、部署、运行应用的一款虚拟化平台。Docker可以让你像使用集装箱一样快速的组合成应用，并且可以像运输标准集装箱一样，迁移应用程序。它能够帮助开发人员、系统管理员、QA和版本控制工程师在一个生产环节中一起协同工作，程序员不需要关心容器的变化，而更专注自己的应用程序代码，从而隔离开了开发和管理，简化了开发和部署的成本。Docker是一个轻量级的容器，因此它可以在很短的时间内启动和关闭。当你需要的时候，你可以启动多个容器引擎，并且在不需要使用他们的时候，可以将他们全部关闭。
Docker简化了容器应用的开发过程，开发者可以从镜像仓库中获取环境镜像来部署开发环境，完成编码后将应用程序及全部依赖打包成新的镜像上传到镜像仓库，负责测试和应用上线的人员下载镜像包到本地机器后即可运行容器，不用关心操作系统的区别以及和其它应用程序之间的冲突，在生产环境中测试、部署应用程序的速度得到了显著提高。Docker将应用程序从物理硬件中抽出来，使开发者可以降低对应用部署的关注，将注意力更加集中在应用程序的功能上。
2、Docker命令
（1）Docker基本命令
在Ubuntu系统中，可执行以下命令完成安装：sudo  apt-get  install  docker.io安装完成后，可查看Docker版本信息：docker  version，运行命令后可显示全面的版本信息。
 
可以通过以下命令获得帮助信息：docker  --help。
Docker命令格式为：docker  [OPTIONS]  COMMAND，其常用命令有：
  config       管理Docker配置命令
    container    管理Docker容器命令
      image       管理Docker镜像命令Manage images
        network     管理网络命令Manage networks
          plugin       管理Docker插件命令
            service      管理Docker服务命令
              system      管理Docker系统配置命令
              可以运行docker  container  --help 获取容器相关命令帮助，或运行
              docker  image  --help 获取镜像相关命令帮助，其他命令使用方法相似。
              （2）Docker镜像
              Docker包含三个基本概念，分别是镜像（Image）、容器（Container）和仓库（Repository）。镜像是Docker运行容器的前提，仓库是存放镜像的场所。镜像可以看作是一个特殊的文件，它提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数。镜像不包含任何动态数据，其内容在构建之后也不会被改变。
              所有镜像都是通过一个64位十六进制字符串（镜像ID）来标识的。为简化使用，前12个字符可以组成一个短ID，可以在命令行中使用。短ID还是有一定的碰撞机率，所以服务器总是返回长ID。
              可以使用 docker  pull命令来从仓库获取所需要的镜像。
              下面的命令将从 Docker  Hub仓库下载一个Ubuntu 18.04 操作系统的镜像。 sudo docker pull ubuntu:18.04，下载过程中，会输出获取镜像的信息。该命令实际上相当于 $ sudo docker pull registry.hub.docker.com/ubuntu:18.04 命令，即从注册服务器registry.hub.docker.com 中的 ubuntu 仓库来下载标记为 18.04 的镜像。有时候官方仓库注册服务器下载较慢，可以从其他仓库下载。 从其它仓库下载时需要指定完整的仓库注册服务器地址。
              列出本地镜像，可以运行 docker images 显示本地已有的镜像。在列出信息中，可以看到REPOSITORY（镜像来源于那个仓库）、TAG（镜像标记）IMAGE ID（镜像ID）、CREATED（创建时间）、SIZE（大小）。
               
              其中镜像的ID是其唯一标识，如果两个镜像具有相同的镜像 ID，说明它们实际上是同一镜像。
              TAG信息用来标记来自同一个仓库的不同镜像。例如 ubuntu 仓库中有多个镜像，通过TAG信息来区分发行版本，例如12.04、14.04、16.04等。
              镜像相关命令格式为： docker  image  command；常用的命令有：
              ls        列出本机镜像 
              build     构建镜像
              history   查看镜像历史
              inspect   显示一个或多个镜像详细信息
              pull      从镜像仓库拉取镜像文件
              push     推送本地镜像到仓库
              rm      移除一个或多个本地镜像文件
              prune    移除未使用的镜像，没有被标记或未被任何容器应用的镜像
              tag      创建一个引用源镜像标记目标镜像
              export   导出容器文件系统到tar归档文件
              import   导入容器文件系统到tar归档文件创建镜像
              save     保存一个或多个镜像文件到一个tar归档文件
              load     加载镜像文件来自tar归档或标准输入
              （3）Docker容器
              容器是Docker运行映像的实例，容器用于运行实际的应用程序。容器包括应用程序及其所有依赖项，它与其他容器共享内核，并在主机操作系统的用户空间中作为独立进程运行。镜像下载后，即可随时使用该镜像了，可以通过docker run 命令运行镜像并启动容器。
              启动容器有两种方式，一种是基于镜像新建一个容器并启动，另外一个是将在终止状态（stopped）的容器重新启动。
              新建一个容器并启动，如下面的命令输出一个“Hello!”，之后终止容器。
              $ sudo docker  run  ubuntu:18.04  /bin/echo 'Hello!'
              Hello!
              此时，容器中运行程序与系统本机直接执行 /bin/echo 'hello world'显示相同。 
              下面的命令则启动一个bash终端，允许用户进行交互。
              $ sudo  docker  run  -t  -i  ubuntu:18.04 /bin/bash
              其中，-t 选项让Docker分配一个伪终端（pseudo-tty）并绑定到容器的标准输入上， -i 则让容器的标准输入保持打开。在交互模式下，用户可以通过所创建的终端来输入命令并在容器中执行。如需要让Docker容器在后台以守护态（Daemonized）形式运行，可以通过 -d 参数来实现。
              列出所有运行中的容器命令为：docker  container  ls列出的结果是按列显示的。每一列的值分别为：Container ID（容器ID），Image（运行容器的镜像名）、Command（容器启动后运行的命令）、Created（创建时间）、Status（容器状态）、Ports（与宿主机相连接的端口）、Names（容器名），如添加-a 参数，则可以查看全部容器，已停止的容器状态被标注为exited。
              当Docker容器中指定的应用终结时，容器也自动终止。对于只启动了一个终端的容器，用户通过 exit 命令或 Ctrl+d 来退出终端时，所创建的容器立刻终止。
              终止状态的容器可以用 docker ps -a 命令看到。
              容器相关命令格式为：docker  container  command；常用容器相关命令有：
              attach        附加本地标准输入输出到一个运行的容器
              cp           拷贝文件/文件夹到一个容器
              exec        在运行容器中执行命令
              inspect         显示一个或多个容器的详细信息
              logs        获取一个容器日志
              ls             显示容器信息
              rm              删除一个或多个容器
              run             运行容器
              start       启动容器
              stats       显示容器资源使用统计
              stop        停止容器
              top            显示一个容器运行的进程

              二、  Apollo软件系统
              Apollo发展历程（放到前面一节）
              2017年4启动Apollo（阿波罗）计划，旨在向汽车行业及自动驾驶领域的合作伙伴提供一个开放、完整、安全的软件平台，帮助他们结合车辆和硬件系统，快速搭建一套属于自己的完整的自动驾驶系统，命名为“Apollo”，是借用了阿波罗登月计划的含义。
              Apollo平台是一套完整的软硬件和服务系统，包括车辆平台、硬件平台、软件平台、云端数据服务等四大部分。其主要版本及特点现简介如下.
              阿波罗1.0，实现自动GPS航路点跟踪，可以使车辆在一个封闭的场地实现基于GPS定位的循迹驾驶。
              阿波罗1.5用于固定航线巡航。随着激光雷达的加入，这种版本的车辆现在对周围环境有了更好的感知，可以更好地绘制其当前位置并规划其轨迹，以便在其车道上进行更安全的机动。
              阿波罗2.0支持车辆在简单的城市道路上自主驾驶。车辆能够安全地在道路上巡航，避免与障碍物碰撞，在红绿灯处停车，并在需要时变换车道以到达目的地。
              阿波罗2.5允许车辆在土工围栏的公路上自主运行，并配有用于障碍物检测的摄像头。车辆能够保持车道控制、巡航并避免与前方车辆碰撞。
              阿波罗3.0的主要重点是为开发者提供一个在封闭场地低速环境中构建的平台。车辆能够保持车道控制、巡航并避免与前方车辆碰撞。
              阿波罗3.5能够在住宅区和市中心等复杂的驾驶场景中导航。这款车现在拥有360度的可见度，以及升级的感知算法，以应对城市道路不断变化的状况，使汽车更加安全和有意识。基于场景的规划可以在复杂场景中导航，包括住宅区和有停车标志的道路中经常出现的无保护转弯和狭窄街道。
              阿波罗5.0是一项支持批量生产的工作，用于地理围栏自动驾驶。这款车现在拥有360度的可见度，以及升级的perception deep learning模型，以应对复杂道路场景的不断变化的条件，使汽车更加安全和有意识。基于场景的规划已得到增强，以支持其他场景，如靠边停车和穿越光秃秃的十字路口。
              阿波罗5.5通过引入路缘到路缘的驾驶支持，增强了阿波罗之前版本的复杂城市道路自动驾驶能力。有了这一新功能，阿波罗现在离完全自主的城市道路驾驶又近了一步。该车拥有完整的360度可视性，以及升级的perception deep learning模型和全新的预测模型，以处理复杂道路和交叉口场景的变化情况，使汽车更加安全和敏感。
              阿波罗6.0采用了新的深度学习模型，以增强某些阿波罗模块的能力。该版本与新增的数据管道服务无缝配合，以更好地为阿波罗开发者服务。阿波罗6.0也是第一个集成某些功能的版本，以展示我们对无人驾驶技术的持续探索和实验努力。

              1、Apollo系统组成
              本教材主要以2021年6月推出的Apollo 6.0 EDU 版本开展讲解。该版本主要目的提供满足自动驾驶人才培养需求的Apollo教育方案。软件架构主要包括四个层次。
              云服务平台：主要包括HD MAP（高清地图）、Simulation（仿真）、Production Component（数据采集）、Apollo Data Pipeline（Apollo数据传递模块）Security（安全）、OTA（远程下载）、V2X（车路协同）等功能模块。
              开源软件平台：主要包括Map Engine（地图引擎）、Localization（定位）、Perception（感知）、Prediction（预测）、Planning（规划）、control（控制）、HMI（人机交互）、V2X Adapter（车路协同接口）、Apollo Cyber RT（系统接口）RTOS（实时操作系统）等模块。其中最底层为实时操作系统，各软件模块通过Cyber RT与实时操作系统实现数据对接。
              硬件驱动平台：主要包括Computing Unit（计算单元）、GNSS（全球定位系统）、Camera（摄像头）、LIDAR（激光雷达）、Radar（毫米波雷达）Ultrasonic（超声波）、HMI Device（人机交互设备）、Black Box（黑盒子）、ASU（传感器单元）、AXU（扩展单元）、V2X OBU（车路协同）、Microphone（声音）等模块，为各类硬件与传感器提供了软件驱动。
              整车接口平台：主要包括Certified Apollo Compatible Drive-by-Wire Vehicle（百度认证线控整车接口）、Open Vehicle Interface（开放车辆接口）等模块，主要用于与整车控制器进行通信。
               
                进入Docker容器/apollo目录下，可以方便地查看Apollo开源软件平台层的文件目录，具体包括以下内容：
                |-- bazel-bin        用Bazel进行构建产生的可执行文件目录
                |-- bin             可执行文件目录，主要存放Cyber RT模块可执行文件
                |-- cyber           Cyber RT数据与文件存放目录
                |-- data            记录、日志等数据存放目录
                |-- docker          docker相关运行脚本存放目录
                |-- docs            文档目录，主要存放帮助文档与说明文件
                |-- lib              库目录，主要存放各模块运行所需库文件及第三方库文件
                |-- modules         模块目录，主要存放各功能模块文件
                |   |-- audio        声音模块
                |   |-- bridge       桥接模块
                |   |-- calibration    参数校准，主要存放用户车辆校准数据
                |   |-- canbus       canbus通信模块
                |   |-- common      共用模块
                |   |-- contrib        其他模块
                |   |-- control        控制模块
                |   |-- dreamview     人机交互显示模块
                |   |-- drivers         驱动模块
                |   |-- guardian       安全控制模块
                |   |-- localization     定位模块
                |   |-- map           地图模块
                |   |-- monitor        数据监控模块
                |   |-- perception      感知模块
                |   |-- planning        规划模块
                |   |-- prediction       决策模块
                |   |-- routing          路径模块
                |   |-- storytelling       场景管理模块
                |   |-- task_manager     任务协调控制模块
                |   |-- third_party_perception    第三方驱动模块
                |   |-- tools            工具模块
                |   |-- transform        坐标变换模块
                |   -- v2x              车路协同模块
                |-- scripts              脚本文件目录，存放常用脚本
                2、Dreamview简介
                    智能汽车的人机交互界面（HMI），指的是智能汽车和用户之间进行交互和信息交换的媒介，用于实现信息的内部形式与人类可以接受的形式之间的转换。Apollo主要通过Dreamview实现人机交互功能，Dreamview是一个web应用程序，提供如下的功能：
                        1）可视化显示当前车辆信息。例如：车辆速度、规划路径、车辆定位、周边环境等。
                        2）为使用者提供人机交互接口以监测车辆硬件状态，对模块进行开关操作等。
                        3）提供调试工具与信息。例如：跟踪模块输出、提示运行错误或警告等。
                        启动Dreawview及相关模块后，可以通过Web浏览器，输入IP地址与端口号后可以看到如下图所示的界面。
                         
                        该界面分为多个区域：标题栏、侧边栏、主视图和工具视图。
                        标题栏位于顶部，包含Check Version5个下拉列表可以如图所示进行操作：
                         
                        侧边栏控制着显示在工具视图中的模块。
                        1）Tasks
                        在 DreamView 中，您可以操作的 tasks 有：
                          Quick Start：当前选择的模式支持的指令。
                          Setup：开启所有模块。
                          Reset All：关闭所有模块。
                          Start Auto：开始车辆的自动驾驶。
                          Others：工具经常使用的开关和按钮。
                          Module Delay：从模块中输出的两次事件的时间延迟。
                          Console：从 Apollo 平台输出的监视器信息。
                        2）Module Controller
                        监视硬件状态和对模块进行开关操作。启动和停止这些模块功能，不仅可以用 Dreamview 上的这些可视化按钮启动，也可以通过命令行来启动。在后续的各个模块的实践中，您可以看到用命令行启动各个模块的说明。在回放历史数据包时，这些模块的开与关都不影响车辆的运行。
                         
                        3）Layer Menu
                        显式控制各个元素是否显示的开关。
                         
                        可以从Layer Menu 选择的观察视角，有默认视图（Default）、近距离视图（Near）、俯瞰视图（Overhead）、地图视图（Map）。滚动鼠标滚轮放大/缩小显示范围，按下右键并拖拽可以移动显示区域。
                        4）Route Editing
                        在向Routing模块发送寻路信息请求前，可以编辑路径信息的可视化工具。
                        5）Data Recoder
                        用于数据记录过程中增加驾驶事件或声音事件信息。
                        Dreawvies显示页面中有各种图形符号。现分别对常见的图形元素简要进行说明。
                        主视图中涉及到的图形元素主要包括车辆、车道、车速、交通灯等基本信息。
                        图形元素    简要释义
                            自动驾驶车辆。
                                •  车轮转动的比率。
                                •  左右转向灯的状态。
                                    交通信号灯状态。
                                        驾驶状态：AUTO、DISENGAGED、MANUAL等。
                                            •  行驶速度 km/h。
                                            •  加速速率/刹车速率。
                                                红色粗线条表示建议的寻路路径。
                                                    轻微移动物体决策—橙色表示应该避开的区域。
                                                        绿色的粗曲线条带表示规划的轨迹。
                                                        障碍物相关主要图形元素如下表。
                                                        图形元素    简要释义
                                                            车辆障碍物。
                                                                行人障碍物。
                                                                    自行车障碍物。
                                                                        未知障碍物。
                                                                            速度方向显示了移动物体的方向，长度随速度按照比率变化。
                                                                                白色箭头显示了障碍物的移动方向。
                                                                                    黄色文字表示：
                                                                                    •  障碍物的跟踪 ID，
                                                                                    •  自动驾驶车辆和障碍物的距离及障碍物速度。
                                                                                        线条显示了障碍物的预测移动轨迹，线条标记为和障碍物同一个颜色。
                                                                                        Planning决策-决策栅栏区
                                                                                        决策栅栏区显示了系统对车辆障碍物做出的决策。每种类型的决策会表示为不同的颜色和图标。
                                                                                        图形元素    简要释义
                                                                                            停止：表示物体主要的停止原因。
                                                                                                停止：表示物体的停止原因。
                                                                                                    跟车：物体。
                                                                                                        让行：物体决策—点状的线条连接了各个物体。
                                                                                                            超车：物体决策—点状的线条连接了各个物体。
                                                                                                                停止标志处的让行物体。
                                                                                                                如果显示了停止决策栅栏区，则停止原因展示在停止图标的右侧。可能的停止原因和对应的图标为：
                                                                                                                图形元素    简要释义
                                                                                                                    前方道路侧边区域。
                                                                                                                        前方人行道。
                                                                                                                            到达目的地。
                                                                                                                                紧急停车。
                                                                                                                                    自动驾驶模式未准备好。
                                                                                                                                        障碍物阻塞道路。
                                                                                                                                            前方行人穿越。
                                                                                                                                                黄/红信号灯。
                                                                                                                                                    前方有车辆。
                                                                                                                                                        前方停止标志。
                                                                                                                                                            前方让行标志。

                                                                                                                                                            三、    CyberRT功能及指令
                                                                                                                                                            1、CyberRT介绍
                                                                                                                                                            Cyber RT是一个运行框架，是百度为解决自动驾驶系统与底层的实时操作系统接口而设计的，它介于操作系统与驾驶算法之间，为自动驾驶系统提供可靠的运行平台与方便的接口，Cyber RT的主要特性是高并发，低延迟以及高吞吐，这些特性都是为自动驾驶任务所设计。Cyber  RT明确定义了数据与任务接口，提供了高效自适应的消息通信机制、方便的程序调试功能、大量传感器驱动程序及一系列开发工具，它部署方便，可移植，依赖更少，极大地加速了软件开发进程。
                                                                                                                                                            CyberRT主要是实现多任务的管理与调度，其常用术语。
                                                                                                                                                            Node（节点）：每一个模块包含Node并通过Node来通信，节点可以理解为一个相对独立的任务。
                                                                                                                                                            Channel（通道）：用于管理数据通信，用户可以通过publish/subscribe相同的channel来实现任务间通信。
                                                                                                                                                            Reader/Writer（读/写）：一种信息订阅模式，主要用于节点间单向向通信。
                                                                                                                                                            Service/Client（服务/客户端）：是一种请求/响应模式，支持节点间双向通信。
                                                                                                                                                            Publish/Subscribe（发布/订阅）：一种信息订阅模式，可以实现多对多的消息传传输。
                                                                                                                                                            Message（消息）：是CyberRT用于模块间通信的数据单元，其实现基于protobuf文件定义。
                                                                                                                                                            Parameter（参数）：为服务提供全局参数访问接口。
                                                                                                                                                            Record file（记录文件）用于记录从channel发送或接收的消息。回放record file可以重现之前的操作行为。
                                                                                                                                                            Launch file（启动文件）：提供一种启动模块的便利途径，可以在launch file启动多个模块。
                                                                                                                                                            2、CyberRT常用命令
                                                                                                                                                            CyberRT提供了以下工具用来辅助日常开发，包括：监控工具cyber_monitor、数据包工具cyber_recorder、可视化工具cyber_visualizer。这些工具需要运行在 Apollo Docker 环境内，且依赖于CyberRT软件库。使用这些命令前，需要通过运行/apollo/cyber/setup.bash来配置CyberRT工具的运行环境。CyberRT常用命令有：
                                                                                                                                                            cyber_monitor    查看CyberRT系统基本状态；
                                                                                                                                                            cyber_recorder    处理CyberRT数据记录命令；
                                                                                                                                                            cyber_visualizer    图形显示CyberRT相关数据，如雷达点云，摄像头抓取的图像等。
                                                                                                                                                            cyber_launch      启动停止相关模块；
                                                                                                                                                            cyber_channel     查看相关数据通道信息； 
                                                                                                                                                            任务实施
                                                                                                                                                            一、    任务准备
                                                                                                                                                            实施本任务所使用的设备与软件及要求如下：

                                                                                                                                                            序号    分类    名称    型号或版本号    数量    单位
                                                                                                                                                                设备    计算机  16G 1   台
                                                                                                                                                                    软件    Ubuntu Linux 操作系统   18.04+  1   
                                                                                                                                                                            Docker Engine   19.03+  1   
                                                                                                                                                                                    Apollo  EDU6.0  1   
                                                                                                                                                                                            NVIDIA GPU驱动      1   

                                                                                                                                                                                            二、    使用Dreamview查看数据包
                                                                                                                                                                                            当在计算机中安装Apollo搭建好Apollo的运行环境后，可以开展以下操作。
                                                                                                                                                                                            1、 进入 Apollo Docker 环境
                                                                                                                                                                                            在安装 Apollo 的目录下，输入以下命令进入 Apollo Docker 环境。
                                                                                                                                                                                            ./apollo.sh
                                                                                                                                                                                            如果终端如下面所示，说明您成功进入了 Apollo 的运行容器（xxx为用户名）：
                                                                                                                                                                                            [xxx@in-runtime-docker:/apollo]$ 

                                                                                                                                                                                            2、 启动 Dreamview
                                                                                                                                                                                            在命令行中，输入以下命令，启动 Apollo 的 Dreamview 程序。
                                                                                                                                                                                            bash scripts/bootstrap.sh

                                                                                                                                                                                            下载 Apollo 的演示包
                                                                                                                                                                                            Record 是 Apollo 记录数据的一种数据格式。以 .record 为后缀的文件就是我们说的 record 数据包。在命令行中，输入下面的命令，下载 record 数据包。
                                                                                                                                                                                            wget https://apollo-system.cdn.bcebos.com/dataset/6.0_edu/demo_3.5.record

                                                                                                                                                                                            3、 播放 Apollo 的演示包
                                                                                                                                                                                            cyber_recorder play -f demo_3.5.record --loop
                                                                                                                                                                                            选项 --loop 用于设置循环回放模式。

                                                                                                                                                                                            4、 使用 Dreamview 查看数据包
                                                                                                                                                                                            在浏览器中输入 http://localhost:8888，访问 Apollo Dreamview。如果一切正常，可以看到一辆汽车在 Dreamview 里移动。现在看到的车和道路状况，只是 Dreamview 将 record 数据包的数据单纯的回放，就像播放录好的视频一样。
                                                                                                                                                                                            三、    使用CyberRT命令
                                                                                                                                                                                            1、 熟悉cyber_monitor命令
                                                                                                                                                                                            打开新的终端，在 Apollo Docker 环境中输入以下命令，启动 cyber_monitor。
                                                                                                                                                                                            username@computername:~$: cyber_monitor
                                                                                                                                                                                            cyber_monitor 启动之后，会在终端中显示一个交互界面。cyber_monitor 自动从拓扑中收集所有 channel 信息并分两列显示：分别为 Channels（channel 名称）和 FrameRatio（数据频率）。channel 信息默认显示为红色，当有数据流经 channel 时，对应的行就会显示成绿色。
                                                                                                                                                                                             
                                                                                                                                                                                            cyber_monitor –h  可以获得帮助信息
                                                                                                                                                                                            cyber_monitor -c ChannelName使用 -c 选项，可以让 cyber_monitor 监测一个指定的 channel 信息。
                                                                                                                                                                                            cyber_monitor主要操作介绍如下：
                                                                                                                                                                                            ESC | q key ---- 退出
                                                                                                                                                                                            Backspace ---- 后退
                                                                                                                                                                                            h | H ---- 显示帮助页
                                                                                                                                                                                            PageDown | Ctrl+d ---- 上一页
                                                                                                                                                                                            PageUp | Ctrl+u ---- 下一页
                                                                                                                                                                                            Up, down or w, s keys ---- 上下移动当前的高亮行
                                                                                                                                                                                            Right arrow or d key ---- 进入高亮行, 显示高亮行数据的详细信息
                                                                                                                                                                                            Left arrow or a key ---- 从当前界面返回上一层界面
                                                                                                                                                                                            Enter key ---- 与 d 键相同
                                                                                                                                                                                            f | F ---- 显示数据帧频率
                                                                                                                                                                                            t | T ---- 显示 channel 消息类型
                                                                                                                                                                                            Space ---- 关闭|开启 channel (仅在 channel 有数据到达时有效；channel 关闭后会变成黄色)
    i | I ---- 显示 channel 的 Reader 和 Writer 信息
    b | B ---- 显示 channel 消息内容
    n | N ---- 显示消息中 RepeatedField 的下一条数据
    m | M ---- 显示消息中 RepeatedField 的上一条数据
    2、 熟悉cyber_channel命令
    打开终端，在 Apollo Docker 环境中输入以下命令，cyber_channel –h可以获得帮助信息。
    cyber_channel list  列出激活的通道名；
    cyber_channel info  显示通道相关信息；
    cyber_channel echo  将通道信息显示在屏幕上；
    cyber_channel hz    显示发布信息的频次；
    cyber_channel bw    显示通道传送数据的频宽值；
    cyber_channel type  显示通信类型；
    可以使用上述各命令对相关通道进行信息查询。
    任务测评

    巩固与提高


