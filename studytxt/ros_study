source catin_ws/devel/setup.bash
roslaunch robot_sim_demo rebot_spawn.launch
启动



topic总结三点：
topic通信方式是异步的，发送时调用publish()方法，发送完成立即返回，不用等待反馈。
subscriber通过回调函数的方式来处理消息。
topic可以同时有多个subscribers，也可以同时有多个publishers。ROS中这样的例子有：/rosout、/tf等等。

topic list  列出当前所有的topic
rostopic info topic_name    显示某个topic的属性信息
rostopic echo topic_name    显示某个topic的内容
rostopic pub topic_name ... 向某个topic发布内容
rostopic bw topic_name  查看某个topic的带宽
rostopic hz topic_name  查看某个topic的频率
rostopic find topic_type    查找某个类型的topic
rostopic type topic_name    查看某个topic的类型(msg)

名称    Topic   Service
通信方式    异步通信    同步通信
实现原理    TCP/IP  TCP/IP
通信模型    Publish-Subscribe   Request-Reply
映射关系    Publish-Subscribe(多对多)   Request-Reply（多对一）
特点    接受者收到数据会回调（Callback）    远程过程调用（RPC）服务器端的服务
应用场景    连续、高频的数据发布    偶尔使用的功能/具体的任务
举例    激光雷达、里程计发布数据    开关传感器、拍照、逆解计算

在实际应用中，service通信方式的命令时rosservice，具体的命令参数如下表：
rosservice 命令 作用
rosservice list 显示服务列表
rosservice info 打印服务信息
rosservice type 打印服务类型
rosservice uri  打印服务ROSRPC uri
rosservice find 按服务类型查找服务
rosservice call 使用所提供的args调用服务
rosservice args 打印服务参数

使用命令行来维护参数服务器，主要使用rosparam语句来进行操作的各种命令，如下表：
rosparam 命令   作用
rosparam set param_key param_value  设置参数
rosparam get param_key  显示参数
rosparam load file_name 从文件加载参数
rosparam dump file_name 保存参数到文件
rosparam delete 删除参数
rosparam list   列出参数名称






ROS command
#######################################################
shell command: 
roscd   rosls rosed roscp rospd rosd
run command:
roscore  rosrun  roslaunch rosclean
ros information:
rostopic rossevice rosnode rosparam rosbag rosmsg rossrv roswtf
ros catkin:
catkin_creat_pkg  catkin_make catkin_init_workspace
other:
rospack   rosinstall rosdep roslocate

use offen:
rospack find xxpackage;
rospack list
rosls packname;
catkin_create_pkg packname depspkg
rosdep install packname 
rosrun pkgname nodename
rosnode list
rosnode info
rosnode kill nodename
roslaunch pkgname launchfile //a launch include n node;

#######################################################
create a workspace:
mkdir -p ~/catkin/src 
catkin_make
source devel/setup.bash
cd catkin/src;
catkin_create_pkg mypkg std_msgs rospy roscpp

edit test.cpp:
#include <ros/ros.h>
int main(int argc ,char **argv){
ros::init(argc,argv,"test");
ros::NodeHandle n;
....}

edit Cmaklist.txt:
add_executable(test test.cpp)
target_link_libraries(test $(catkin_LIBRARIES})





#################################################
ROS  install:
printenv |grep ROS  // look the env ;
source /opt/ros/<distro>/setup.bash  //set env;

creat a ROS workspace:
mkdir -p ~/catin_ws/src
cd ~/catkin_ws/    
catkin_make
source devel/setup.bash   //add this worksapce to env;
#################################################
ROS command:
rospack  //look the pack info
roscd  log //cd log dir;
rosls
ros support tab;

#################################################
catkin package:
一个包要想称为catkin软件包，必须符合以下要求：
这个包必须有一个符合catkin规范的package.xml文件
这个package.xml文件提供有关该软件包的元信息
这个包必须有一个catkin版本的CMakeLists.txt文件
如果它是个Catkin元包的话，则需要有一个CMakeList.txt文件的相关样板
每个包必须有自己的目录
这意味着在同一个目录下不能有嵌套的或者多个软件包存在
最简单的软件包看起来就像这样：
my_package/
  CMakeLists.txt
  package.xml
之前在使用catkin_create_pkg命令时提供了几个软件包作为依赖关系，现在我们可以使用rospack命令工具来查看这些一级依赖包。
$ rospack depends1 beginner_tutorials 

#################################################
build  package:
使用catkin_make
catkin_make 是一个命令行工具，它简化了标准catkin工作流程。你可以认为catkin_make是在标准CMake工作流程中依次调用了cmake和make。

用法:


# 在catkin工作空间下
$ catkin_make [make_targets] [-DCMAKE_VARIABLES=...]
如果你不熟悉什么是标准CMake工作流程，可以认为是以下几个步骤：


注意：直接运行以下命令是无效的，因为它只是一个演示CMake工作流程的例子。


# 在CMake工作空间下
$ mkdir build  $ cd build  $ cmake ..  $ make  $ make install  # （可选）每个CMake项目都要单独进行这样的步骤。相反，多个catkin项目可以放在工作空间中一起构建，在工作空间中构建零到多个catkin软件包为以下工作流程：

# 在catkin工作空间下
$ catkin_make
$ catkin_make install  # （可选）
上述命令会构建src目录下的所有catkin项目。该过程遵循REP128的建议。如果你的源代码不在默认位置（catkin_ws/src），比如说存放在了my_src中，那可以这样来使用catkin_make:

注意：直接运行以下命令是无效的，因为my_src可能不存在。

# 在catkin工作空间下
$ catkin_make --source my_src
$ catkin_make install --source my_src  # （可选）

开始构建你的软件包

如果现在就要构建自己的代码，请同时看一下后面的（C++）/（Python）教程，因为你可能需要修改CMakeLists.txt文件。

按照之前的创建ROS软件包教程，你应该已经创建好了一个catkin工作空间和一个名为beginner_tutorials的catkin软件包。现在切换到catkin工作空间并查看src目录：
$ cd ~/catkin_ws/
$ ls src
beginner_tutorials/  CMakeLists.txt@  
你可以看到一个名为beginner_tutorials的目录，这就是你之前用catkin_create_pkg命令创建的。现在我们可以使用catkin_make来构建它了:
$ catkin_make
你可以看到很多cmake和make的输出信息
#################################################
计算图（Computation Graph）是一个由ROS进程组成的点对点网络，它们能够共同处理数据。ROS的基本计算图概念有节点（Nodes）、主节点（Master）、参数服务器（Parameter Server）、消息（Messages）、服务（Services）、话题（Topics）和袋（Bags），它们都以不同的方式向图（Graph）提供数据。
节点（Nodes）：节点是一个可执行文件，它可以通过ROS来与其他节点进行通信。
消息（Messages）：订阅或发布话题时所使用的ROS数据类型。
话题（Topics）：节点可以将消息发布到话题，或通过订阅话题来接收消息。
主节点（Master）：ROS的命名服务，例如帮助节点发现彼此。
rosout：在ROS中相当于stdout/stderr（标准输出/标准错误）。
roscore：主节点 + rosout + 参数服务器（会在以后介绍）。

ROS客户端库可以让用不同编程语言编写的节点进行相互通信：

rospy = Python客户端库
roscpp = C++客户端库
roscore是你在运行所有ROS程序前首先要运行的命令。
请运行：
$ roscore
rosnode显示当前正在运行的ROS节点信息。rosnode list命令会列出这些活动的节点：
$ rosnode list
rosrun  package_name  node-name;
#################################################
ROS话题
turtlesim_node节点和turtle_teleop_key节点之间是通过一个ROS话题来相互通信的。turtle_teleop_key在话题上发布键盘按下的消息，turtlesim则订阅该话题以接收消息。让我们使用rqt_graph来显示当前运行的节点和话题。

使用rqt_graph
rqt_graph用动态的图显示了系统中正在发生的事情。rqt_graph是rqt程序包中的一部分。如果你发现没有安装，请：
$ sudo apt-get install ros-<distro>-rqt
$ sudo apt-get install ros-<distro>-rqt-common-plugins
将<distro>替换成你安装的ROS发行版简称（比如kinetic或noetic等）。
打开一个新终端：
$ rosrun rqt_graph rqt_graph
你会看到一个窗口：display 2 node and 1 topic;
rostopic -h //show the help;
rostopic echo //look the data on the topic;
rostopic list // show the all topic;
rostopic type命令用来查看所发布话题的消息类型。
用法：rostopic type [topic]

使用rostopic pub
rostopic pub可以把数据发布到当前某个正在广播的话题上。
用法：
rostopic pub [topic] [msg_type] [args]
$ rostopic pub -1 /turtle1/cmd_vel geometry_msgs/Twist -- '[2.0, 0.0, 0.0]' '[0.0, 0.0, 1.8]'

rostopic hz报告数据发布的速率。
用法：
rostopic hz [topic]
我们看一下turtlesim_node发布/turtle/pose得有多快：
$ rostopic hz /turtle1/pose

rosservice list;
rosservice type service;
rosservice call sercice rags;
sample:
rosservice call /clear ;
rosservice call /spawn 2 2 0.5 "my"  //made a new turtle;
rosparam能让我们在ROS参数服务器（Parameter Server）上存储和操作数据。参数服务器能够存储整型（integer）、浮点（float）、布尔（boolean）、字典（dictionaries）和列表（list）等数据类型。rosparam使用YAML标记语言的语法。一般而言，YAML的表述很自然：1是整型，1.0是浮点型，one是字符串，true是布尔型，[1, 2, 3]是整型组成的列表，{a: b, c: d}是字典。rosparam有很多命令可以用来操作参数，如下所示：
rosparam set            设置参数
rosparam get            获取参数
rosparam load           从文件中加载参数
rosparam dump           向文件中转储参数
rosparam delete         删除参数
rosparam list           列出参数名

rosparam set和rosparam get
用法：
rosparam set [param_name]
rosparam get [param_name]
现在我们修改背景颜色的红色通道值：
$ rosparam set /turtlesim/background_r 150
上述指令修改了参数的值，现在我们需要调用clear服务使得参数的修改能生效：
$ rosservice call /clear
也可以用rosparam get /来显示参数服务器上的所有内容：

rosparam dump和rosparam load
用法：

rosparam dump [file_name] [namespace]
rosparam load [file_name] [namespace]
在这里，我们将所有的参数写入params.yaml文件：

$ rosparam dump params.yaml
你甚至可以将yaml文件重载入新的命名空间，例如copy_turtle：

$ rosparam load params.yaml copy_turtle
$ rosparam get /copy_turtle/turtlesim/background_b
#################################################
  2.3 Package软件包

在1.6节我们曾对package软件包进行了分类，分别介绍了二进制包和源代码包。而ROS中的package的定义更加具体，它不仅是Linux上的软件包，更是catkin编译的基本单元，我们调用`catkin_make`编译的对象就是一个个ROS的package，也就是说任何ROS程序只有组织成package才能编译。所以package也是ROS源代码存放的地方，任何ROS的代码无论是C++还是Python都要放到package中，这样才能正常的编译和运行。  
一个package可以编译出来多个目标文件（ROS可执行程序、动态静态库、头文件等等）。

## 2.3.1 package结构

一个package下常见的文件、路径有：

```
  ├── CMakeLists.txt    #package的编译规则(必须)
  ├── package.xml       #package的描述信息(必须)
  ├── src/              #源代码文件
  ├── include/          #C++头文件
  ├── scripts/          #可执行脚本
  ├── msg/              #自定义消息
  ├── srv/              #自定义服务
  ├── models/           #3D模型文件
  ├── urdf/             #urdf文件
  ├── launch/           #launch文件   
```

其中定义package的是`CMakeLists.txt`和`package.xml`，这两个文件是package中必不可少的。catkin编译系统在编译前，首先就要解析这两个文件。这两个文件就定义了一个package。

* CMakeLists.txt: 定义package的包名、依赖、源文件、目标文件等编译规则，是package不可少的成分
* package.xml: 描述package的包名、版本号、作者、依赖等信息，是package不可少的成分
* src/: 存放ROS的源代码，包括C++的源码和\(.cpp\)以及Python的module\(.py\)
* include/: 存放C++源码对应的头文件
* scripts/: 存放可执行脚本，例如shell脚本\(.sh\)、Python脚本\(.py\)
* msg/: 存放自定义格式的消息\(.msg\)
* srv/: 存放自定义格式的服务\(.srv\)
* models/: 存放机器人或仿真场景的3D模型\(.sda, .stl, .dae等\)
* urdf/: 存放机器人的模型描述\(.urdf或.xacro\)
* launch/: 存放launch文件\(.launch或.xml\)

通常ROS文件组织都是按照以上的形式，这是约定俗成的命名习惯，建议遵守。以上路径中，只有`CMakeLists.txt`和`package.xml`是必须的，其余路径根据软件包是否需要来决定。

## 2.3.2 package的创建

创建一个package需要在`catkin_ws/src`下,用到`catkin_create_pkg`命令，用法是：  
`catkin_create_pkg package depends`  
其中package是包名，depends是依赖的包名，可以依赖多个软件包。

例如，新建一个package叫做`test_pkg`,依赖roscpp、rospy、std\_msgs\(常用依赖\)。

```bash
$ catkin_create_pkg test_pkg roscpp rospy std_msgs
```

这样就会在当前路径下新建`test_pkg`软件包，包括：

```
  ├── CMakeLists.txt
  ├── include
  │   └── test_pkg
  ├── package.xml
  └── src
```

`catkin_create_pkg`帮你完成了软件包的初始化，填充好了`CMakeLists.txt`和`package.xml`，并且将依赖项填进了这两个文件中。

## 2.3.3 package相关命令

### rospack

rospack是对package管理的工具，命令的用法如下：

| rostopic命令 | 作用 |
| :---: | :---: |
| `rospack help` | 显示rospack的用法 |
| `rospack list` | 列出本机所有package |
| `rospack depends [package]` | 显示package的依赖包 |
| `rospack find [package]` | 定位某个package |
| `rospack profile` | 刷新所有package的位置记录 |

以上命令如果package缺省，则默认为当前目录\(如果当前目录包含package.xml\)

### roscd

`roscd`命令类似与Linux系统的`cd`，改进之处在于`roscd`可以直接`cd`到ROS的软件包。

| rostopic命令 | 作用 |
| :---: | :---: |
| `roscd [pacakge]` | cd到ROS package所在路径 |

### rosls

`rosls`也可以视为Linux指令`ls`的改进版，可以直接`ls`ROS软件包的内容。

| rosls命令 | 作用 |
| :---: | :---: |
| `rosls [pacakge]` | 列出pacakge下的文件 |

### rosdep

`rosdep`是用于管理ROS package依赖项的命令行工具，用法如下：

| rosdep命令 | 作用 |
| :---: | :---: |
| `rosdep check [pacakge]` | 检查package的依赖是否满足 |
| `rosdep install [pacakge]` | 安装pacakge的依赖 |
| `rosdep db` | 生成和显示依赖数据库 |
| `rosdep init` | 初始化/etc/ros/rosdep中的源 |
| `rosdep keys` | 检查package的依赖是否满足 |
| `rosdep update` | 更新本地的rosdep数据库 |

一个较常使用的命令是`rosdep install --from-paths src --ignore-src --rosdistro=kinetic -y`,用于安装工作空间中`src`路径下所有package的依赖项（由pacakge.xml文件指定）。



